% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/crew_multi_controller.R
\name{crew_class_multi_controller}
\alias{crew_class_multi_controller}
\title{Multi-controller class}
\description{
\code{R6} class for \code{mirai} controllers.
}
\details{
See \code{\link[=crew_mirai_controller]{crew_mirai_controller()}}.
}
\examples{
if (identical(Sys.getenv("CREW_EXAMPLES"), "true")) {
persistent <- crew_mirai_controller_callr(name = "persistent")
transient <- crew_mirai_controller_callr(
  name = "transient",
  max_tasks = 1L
)
multi <- crew_multi_controller(persistent, transient)
multi$connect()
multi$push(name = "task", command = sqrt(4), controller = "transient")
multi$wait()
multi$pop()
multi$controllers[["persistent"]]$launcher$running() # 0
multi$controllers[["transient"]]$launcher$running() # 0
multi$terminate()
}

## ------------------------------------------------
## Method `crew_class_multi_controller$new`
## ------------------------------------------------

if (identical(Sys.getenv("CREW_EXAMPLES"), "true")) {
persistent <- crew_mirai_controller_callr(name = "persistent")
transient <- crew_mirai_controller_callr(
  name = "transient",
  max_tasks = 1L
)
multi <- crew_multi_controller(persistent, transient)
multi$connect()
multi$push(name = "task", command = sqrt(4), controller = "transient")
multi$wait()
multi$pop()
multi$controllers[["persistent"]]$launcher$running() # 0
multi$controllers[["transient"]]$launcher$running() # 0
multi$terminate()
}
}
\seealso{
Other controllers: 
\code{\link{crew_mirai_controller_callr}()},
\code{\link{crew_multi_controller}()}
}
\concept{controllers}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{controllers}}{List of \code{R6} controller objects.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-crew_class_multi_controller-new}{\code{crew_class_multi_controller$new()}}
\item \href{#method-crew_class_multi_controller-validate}{\code{crew_class_multi_controller$validate()}}
\item \href{#method-crew_class_multi_controller-connect}{\code{crew_class_multi_controller$connect()}}
\item \href{#method-crew_class_multi_controller-launch}{\code{crew_class_multi_controller$launch()}}
\item \href{#method-crew_class_multi_controller-collect}{\code{crew_class_multi_controller$collect()}}
\item \href{#method-crew_class_multi_controller-scale}{\code{crew_class_multi_controller$scale()}}
\item \href{#method-crew_class_multi_controller-push}{\code{crew_class_multi_controller$push()}}
\item \href{#method-crew_class_multi_controller-pop}{\code{crew_class_multi_controller$pop()}}
\item \href{#method-crew_class_multi_controller-wait}{\code{crew_class_multi_controller$wait()}}
\item \href{#method-crew_class_multi_controller-terminate}{\code{crew_class_multi_controller$terminate()}}
\item \href{#method-crew_class_multi_controller-clone}{\code{crew_class_multi_controller$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-crew_class_multi_controller-new"></a>}}
\if{latex}{\out{\hypertarget{method-crew_class_multi_controller-new}{}}}
\subsection{Method \code{new()}}{
Multi-controller constructor.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{crew_class_multi_controller$new(controllers = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{controllers}}{List of \code{R6} controller objects.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
An \code{R6} object with the multi-controller object.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{if (identical(Sys.getenv("CREW_EXAMPLES"), "true")) {
persistent <- crew_mirai_controller_callr(name = "persistent")
transient <- crew_mirai_controller_callr(
  name = "transient",
  max_tasks = 1L
)
multi <- crew_multi_controller(persistent, transient)
multi$connect()
multi$push(name = "task", command = sqrt(4), controller = "transient")
multi$wait()
multi$pop()
multi$controllers[["persistent"]]$launcher$running() # 0
multi$controllers[["transient"]]$launcher$running() # 0
multi$terminate()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-crew_class_multi_controller-validate"></a>}}
\if{latex}{\out{\hypertarget{method-crew_class_multi_controller-validate}{}}}
\subsection{Method \code{validate()}}{
Validate the router.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{crew_class_multi_controller$validate()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{NULL} (invisibly).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-crew_class_multi_controller-connect"></a>}}
\if{latex}{\out{\hypertarget{method-crew_class_multi_controller-connect}{}}}
\subsection{Method \code{connect()}}{
Connect one or more controllers.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{crew_class_multi_controller$connect(controllers = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{controllers}}{Character vector of controller names.
If \code{NULL}, it defaults to all controllers in the list.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{NULL} (invisibly).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-crew_class_multi_controller-launch"></a>}}
\if{latex}{\out{\hypertarget{method-crew_class_multi_controller-launch}{}}}
\subsection{Method \code{launch()}}{
Launch one or more workers on one or more controllers.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{crew_class_multi_controller$launch(n = 1L, controllers = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{n}}{Number of workers to launch in each controller selected.}

\item{\code{controllers}}{Character vector of controller names.
If \code{NULL}, it defaults to all controllers in the list.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{NULL} (invisibly).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-crew_class_multi_controller-collect"></a>}}
\if{latex}{\out{\hypertarget{method-crew_class_multi_controller-collect}{}}}
\subsection{Method \code{collect()}}{
Check for done tasks and move the results to
the results list.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{crew_class_multi_controller$collect(controllers = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{controllers}}{Character vector of controller names.
If \code{NULL}, it defaults to all controllers in the list.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{NULL} (invisibly). Removes elements from the \code{queue}
list as applicable and moves them to the \code{results} list.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-crew_class_multi_controller-scale"></a>}}
\if{latex}{\out{\hypertarget{method-crew_class_multi_controller-scale}{}}}
\subsection{Method \code{scale()}}{
Automatically scale up the number of workers if needed
in one or more controller objects.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{crew_class_multi_controller$scale(controllers = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{controllers}}{Character vector of controller names.
If \code{NULL}, it defaults to all controllers in the list.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
See the \code{scale()} method in individual controller classes.
}

\subsection{Returns}{
\code{NULL} (invisibly).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-crew_class_multi_controller-push"></a>}}
\if{latex}{\out{\hypertarget{method-crew_class_multi_controller-push}{}}}
\subsection{Method \code{push()}}{
Push a task to the head of the task list.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{crew_class_multi_controller$push(
  command,
  args = list(),
  timeout = NULL,
  name = NULL,
  scale = TRUE,
  controller = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{command}}{R code with the task to run.}

\item{\code{args}}{A list of objects referenced in \code{expr}.}

\item{\code{timeout}}{Time in milliseconds for the task.}

\item{\code{name}}{Optional name of the task. Replaced with a random name
if \code{NULL} or in conflict with an existing name in the task list.}

\item{\code{scale}}{Logical, whether to automatically scale workers to meet
demand. If \code{TRUE}, then \code{collect()} runs first so demand can be
properly assessed before scaling.}

\item{\code{controller}}{Name of the controller to submit the task.
If \code{NULL}, the controller defaults to the
first controller in the list.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{NULL} (invisibly).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-crew_class_multi_controller-pop"></a>}}
\if{latex}{\out{\hypertarget{method-crew_class_multi_controller-pop}{}}}
\subsection{Method \code{pop()}}{
Pop a completed task from the results data frame.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{crew_class_multi_controller$pop(collect = TRUE, controllers = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{collect}}{Whether to run the \code{collect()} method to collect all
available results before calling \code{pop()}.}

\item{\code{controllers}}{Names of the controllers (in order) to look for
completed tasks.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
If there is a completed task available to collect, the return
value is a one-row data frame with the results, warnings, and errors.
Otherwise, if there are no results available to collect,
the return value is \code{NULL}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-crew_class_multi_controller-wait"></a>}}
\if{latex}{\out{\hypertarget{method-crew_class_multi_controller-wait}{}}}
\subsection{Method \code{wait()}}{
Wait for a result to be ready.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{crew_class_multi_controller$wait(timeout = Inf, wait = 0.1, controllers = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{timeout}}{Timeout length in seconds waiting for
results to become available.}

\item{\code{wait}}{Number of seconds to wait between polling intervals
while checking for results.}

\item{\code{controllers}}{Names of the controllers to wait for.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{NULL} (invisibly). Call \code{pop()} to get the result.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-crew_class_multi_controller-terminate"></a>}}
\if{latex}{\out{\hypertarget{method-crew_class_multi_controller-terminate}{}}}
\subsection{Method \code{terminate()}}{
Terminate the workers and disconnect the router
for one or more controllers.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{crew_class_multi_controller$terminate(controllers = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{controllers}}{Names of the controllers to terminate.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{NULL} (invisibly).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-crew_class_multi_controller-clone"></a>}}
\if{latex}{\out{\hypertarget{method-crew_class_multi_controller-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{crew_class_multi_controller$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
