% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class_crew.R
\name{class_crew}
\alias{class_crew}
\alias{crew}
\title{Crew class.}
\description{
\code{R6} class for a crew.
}
\details{
A crew object is an interface to manage multiple
high-performance computing workers. Supported methods
send jobs, receive output, and poll, etc.
}
\examples{
crew <- class_crew$new()
crew$recruit(workers = 1, timeout = 1)
crew$send(fun = function(arg) paste("job", arg), args = list(arg = 1))
while (!crew$receivable()) Sys.sleep(0.1)
job <- crew$receive()
print(job$value)
print(job$error)
crew$shutdown()
processx::supervisor_kill()
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{name}}{Character of length 1, crew name.}

\item{\code{store}}{\code{R6} store object.}

\item{\code{worker_classes}}{Named list of \code{R6ClassGenerator}
objects with worker definitions. The first one
is the default.}

\item{\code{workers}}{Named list of worker objects.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{class_crew$new()}}
\item \href{#method-recruit}{\code{class_crew$recruit()}}
\item \href{#method-launch}{\code{class_crew$launch()}}
\item \href{#method-sendable}{\code{class_crew$sendable()}}
\item \href{#method-send}{\code{class_crew$send()}}
\item \href{#method-receivable}{\code{class_crew$receivable()}}
\item \href{#method-receive}{\code{class_crew$receive()}}
\item \href{#method-clear}{\code{class_crew$clear()}}
\item \href{#method-shutdown}{\code{class_crew$shutdown()}}
\item \href{#method-dismiss}{\code{class_crew$dismiss()}}
\item \href{#method-restart}{\code{class_crew$restart()}}
\item \href{#method-validate}{\code{class_crew$validate()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Crew constructor.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{class_crew$new(
  name = basename(tempfile(pattern = "crew_")),
  store = crew::class_store_local$new(),
  worker_classes = list(crew::class_worker_callr, crew::class_worker_future)
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{Character of length 1, crew name.}

\item{\code{store}}{\code{R6} store object.}

\item{\code{worker_classes}}{List of \code{R6ClassGenerator}
objects (created with \code{R6Class}) with worker definitions
and constructor.}

\item{\code{max_workers}}{Positive integer,
maximum number of workers in the crew.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The \code{new()} method calls the constructor
and returns a new crew object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-recruit"></a>}}
\if{latex}{\out{\hypertarget{method-recruit}{}}}
\subsection{Method \code{recruit()}}{
create worker objects from one or more worker definitions.
Does not actually launch the new worker objects.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{class_crew$recruit(workers = 1L, class = names(self$worker_classes)[[1]], ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{workers}}{Number of new worker objects to create.}

\item{\code{class}}{Name of the worker class to use for launching workers.
check the \code{worker_classes} field for possible names.}

\item{\code{...}}{Named arguments to the worker constructor.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{NULL} (invisibly).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-launch"></a>}}
\if{latex}{\out{\hypertarget{method-launch}{}}}
\subsection{Method \code{launch()}}{
Launch all down workers in the crew.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{class_crew$launch(tags = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{tags}}{Character vector of allowable tags of eligible workers.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{NULL} (invisibly).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-sendable"></a>}}
\if{latex}{\out{\hypertarget{method-sendable}{}}}
\subsection{Method \code{sendable()}}{
Determine if any worker is unassigned
and ready to accept a new job.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{class_crew$sendable(tags = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{tags}}{Character vector of allowable tags of eligible workers.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{TRUE} if the worker can accept a job and \code{FALSE} otherwise.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-send"></a>}}
\if{latex}{\out{\hypertarget{method-send}{}}}
\subsection{Method \code{send()}}{
Send a job to an available worker. Assumes \code{sendable()}
on the crew returns \code{TRUE}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{class_crew$send(fun, args = list(), tags = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{fun}}{Function to run in the job.}

\item{\code{args}}{Named list of function arguments to \code{fun}.}

\item{\code{tags}}{Character vector of allowable tags of eligible workers.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{NULL} (invisibly).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-receivable"></a>}}
\if{latex}{\out{\hypertarget{method-receivable}{}}}
\subsection{Method \code{receivable()}}{
Determine if any worker in the crew is done
with its current job and the job output is available for collection.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{class_crew$receivable(tags = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{tags}}{Character vector of allowable tags of eligible workers.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{TRUE} if there exists an eligible worker with job output
that can be accessed with \code{receive()}. \code{FALSE} otherwise.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-receive"></a>}}
\if{latex}{\out{\hypertarget{method-receive}{}}}
\subsection{Method \code{receive()}}{
Find a receivable worker, collect its job output,
and free up the worker.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{class_crew$receive(tags = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{tags}}{Character vector of allowable tags of eligible workers.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Once collected and returned. the job output is deleted from
the data store and no longer available to receive.
\code{receive()} also marks the worker as "sendable" again (unblocked)
which makes the worker ready for another job (\code{send()} method).
}

\subsection{Returns}{
A named list of job output. The \code{value} element has the
actual result of the job function, if successful. Other elements
have job metadata such as the error message (if any), traceback,
warnings, and runtime in seconds.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clear"></a>}}
\if{latex}{\out{\hypertarget{method-clear}{}}}
\subsection{Method \code{clear()}}{
Clear worker input and output.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{class_crew$clear(timeout = 60, wait = 1, down_only = TRUE, tags = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{timeout}}{Number of seconds to wait for the file deletion to
succeed.}

\item{\code{wait}}{Number of seconds to wait between iterations checking
that the worker files were successfully removed from the data store.}

\item{\code{down_only}}{Logical of length 1, whether to only clear down jobs.}

\item{\code{tags}}{Character vector of allowable tags of eligible workers.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Deletes worker input and output files.
}

\subsection{Returns}{
\code{NULL} (invisibly)
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-shutdown"></a>}}
\if{latex}{\out{\hypertarget{method-shutdown}{}}}
\subsection{Method \code{shutdown()}}{
Shut down one or more running workers.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{class_crew$shutdown(
  workers = Inf,
  sendable_only = TRUE,
  up_only = TRUE,
  tags = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{workers}}{Positive integer of length 1. Maximum number of workers
to try to shut down. Does not count busy (non-sendable)
workers.}

\item{\code{sendable_only}}{Logical of length 1, whether to ignore
workers that are not sendable.}

\item{\code{up_only}}{Logical of length 1, whether to ignore workers
that are not up.}

\item{\code{tags}}{Character vector of allowable tags of eligible workers.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
This method loops through the workers
from first to last in the worker list. If the worker
is up (running) and sendable (able to receive a job)
then the worker is sent a shutdown command. Otherwise,
the loop moves on to another worker.
}

\subsection{Returns}{
\code{NULL} (invisibly).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-dismiss"></a>}}
\if{latex}{\out{\hypertarget{method-dismiss}{}}}
\subsection{Method \code{dismiss()}}{
Delete one or more worker objects.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{class_crew$dismiss(
  workers = Inf,
  sendable_only = TRUE,
  down_only = TRUE,
  tags = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{workers}}{Positive integer of length 1. Maximum number of workers
to try to dismiss. Does not count up or busy (non-sendable) workers
(workers with unfinished jobs).}

\item{\code{sendable_only}}{Logical of length 1, whether to ignore
workers that are not sendable.}

\item{\code{down_only}}{Logical of length 1, whether to ignore
workers that are still up.}

\item{\code{tags}}{Character vector of allowable tags of eligible workers.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
This method loops through the workers
from first to last in the worker list. If the worker
is down and sendable (able to receive a job)
then the worker object is deleted from the crew. Otherwise,
the loop moves on to another worker.
}

\subsection{Returns}{
\code{NULL} (invisibly).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-restart"></a>}}
\if{latex}{\out{\hypertarget{method-restart}{}}}
\subsection{Method \code{restart()}}{
Restart one or more stuck workers.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{class_crew$restart(workers = Inf, tags = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{workers}}{Positive integer of length 1. Maximum number of workers
to try to restart. Does not count already unstuck workers.}

\item{\code{tags}}{Character vector of allowable tags of eligible workers.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
This method loops through the workers
from first to last in the worker list. If the worker
is stuck, then the worker is restarted. Otherwise,
the loop moves on to another worker.
}

\subsection{Returns}{
\code{NULL} (invisibly).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-validate"></a>}}
\if{latex}{\out{\hypertarget{method-validate}{}}}
\subsection{Method \code{validate()}}{
Crew validator.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{class_crew$validate()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{NULL} (invisibly).
}
}
}
