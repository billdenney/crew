% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class_worker_callr.R
\name{class_worker_callr}
\alias{class_worker_callr}
\alias{worker_callr}
\title{\code{callr} worker class.}
\description{
\code{R6} class for a \code{callr} worker.
}
\examples{
crew <- class_crew$new(worker_classes = list(class_worker_callr))
crew$recruit(workers = 1)
worker <- crew$workers[[1]]
worker$send(fun = function(arg) paste("job", arg), args = list(arg = 1))
while (!worker$receivable()) Sys.sleep(0.1)
job <- worker$receive()
print(job$value)
print(job$error)
worker$shutdown()
}
\section{Super class}{
\code{\link[crew:worker]{crew::worker}} -> \code{worker_callr}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{process}}{A \code{callr::r_bg()} process handler.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-launch}{\code{class_worker_callr$launch()}}
\item \href{#method-up}{\code{class_worker_callr$up()}}
\item \href{#method-shutdown}{\code{class_worker_callr$shutdown()}}
\item \href{#method-validate}{\code{class_worker_callr$validate()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="crew" data-topic="worker" data-id="clear">}\href{../../crew/html/worker.html#method-clear}{\code{crew::worker$clear()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="crew" data-topic="worker" data-id="initialize">}\href{../../crew/html/worker.html#method-initialize}{\code{crew::worker$initialize()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="crew" data-topic="worker" data-id="receivable">}\href{../../crew/html/worker.html#method-receivable}{\code{crew::worker$receivable()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="crew" data-topic="worker" data-id="receive">}\href{../../crew/html/worker.html#method-receive}{\code{crew::worker$receive()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="crew" data-topic="worker" data-id="restart">}\href{../../crew/html/worker.html#method-restart}{\code{crew::worker$restart()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="crew" data-topic="worker" data-id="send">}\href{../../crew/html/worker.html#method-send}{\code{crew::worker$send()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="crew" data-topic="worker" data-id="sendable">}\href{../../crew/html/worker.html#method-sendable}{\code{crew::worker$sendable()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="crew" data-topic="worker" data-id="stuck">}\href{../../crew/html/worker.html#method-stuck}{\code{crew::worker$stuck()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="crew" data-topic="worker" data-id="tagged">}\href{../../crew/html/worker.html#method-tagged}{\code{crew::worker$tagged()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-launch"></a>}}
\if{latex}{\out{\hypertarget{method-launch}{}}}
\subsection{Method \code{launch()}}{
Launch the worker.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{class_worker_callr$launch()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{NULL} (invisibly).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-up"></a>}}
\if{latex}{\out{\hypertarget{method-up}{}}}
\subsection{Method \code{up()}}{
Check if the underlying worker R process
is actually running.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{class_worker_callr$up()}\if{html}{\out{</div>}}
}

\subsection{Details}{
While running, the worker could be actually running a job,
or it could be waiting for job input. This way, a worker
can accept multiple jobs throughout its lifetime before it
times out and is possibly relaunched. This is what it means
to be a "semi-persistent" worker.
}

\subsection{Returns}{
\code{TRUE} if the worker is running and \code{FALSE} otherwise.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-shutdown"></a>}}
\if{latex}{\out{\hypertarget{method-shutdown}{}}}
\subsection{Method \code{shutdown()}}{
Gracefully shut down the worker.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{class_worker_callr$shutdown()}\if{html}{\out{</div>}}
}

\subsection{Details}{
The underlying worker process should promptly
shut down if successful. A new \code{send()} or \code{launch()}
call will re-launch the worker.

The shutdown method
for a \code{callr} worker is quicker and more reliable
than the default method of sending a shutdown job
through the data store.
}

\subsection{Returns}{
\code{NULL} (invisibly).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-validate"></a>}}
\if{latex}{\out{\hypertarget{method-validate}{}}}
\subsection{Method \code{validate()}}{
Worker validator.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{class_worker_callr$validate()}\if{html}{\out{</div>}}
}

}
}
