% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/crew_launcher.R
\name{crew_class_launcher}
\alias{crew_class_launcher}
\title{Launcher abstract class}
\description{
\code{R6} abstract class to build other subclasses
which launch and manage workers.
}
\examples{
router <- crew_router()
router$listen()
launcher <- crew_launcher_callr()
launcher$populate(sockets = router$sockets())
launcher$launch()
m <- mirai::mirai("result")
Sys.sleep(0.25)
m$data
router$terminate()

## ------------------------------------------------
## Method `crew_class_launcher$new`
## ------------------------------------------------

if (identical(Sys.getenv("CREW_EXAMPLES"), "true")) {
router <- crew_router()
router$listen()
launcher <- crew_launcher_callr()
launcher$populate(sockets = router$sockets())
launcher$launch()
m <- mirai::mirai("result")
Sys.sleep(0.25)
m$data
router$terminate()
}
}
\seealso{
Other launchers: 
\code{\link{crew_class_launcher_callr}},
\code{\link{crew_launcher_callr}()}
}
\concept{launchers}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{workers}}{Data frame of worker information.}

\item{\code{data}}{See the constructor for details.}

\item{\code{seconds_launch}}{See the constructor for details.}

\item{\code{seconds_idle}}{See the constructor for details.}

\item{\code{seconds_wall}}{See the constructor for details.}

\item{\code{seconds_exit}}{See the constructor for details.}

\item{\code{seconds_poll_high}}{See the constructor for details.}

\item{\code{seconds_poll_low}}{See the constructor for details.}

\item{\code{tasks_max}}{See the constructor for details.}

\item{\code{tasks_timers}}{See the constructor for details.}

\item{\code{async_dial}}{See the constructor for details.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-crew_class_launcher-new}{\code{crew_class_launcher$new()}}
\item \href{#method-crew_class_launcher-validate}{\code{crew_class_launcher$validate()}}
\item \href{#method-crew_class_launcher-settings}{\code{crew_class_launcher$settings()}}
\item \href{#method-crew_class_launcher-populate}{\code{crew_class_launcher$populate()}}
\item \href{#method-crew_class_launcher-launching}{\code{crew_class_launcher$launching()}}
\item \href{#method-crew_class_launcher-launch}{\code{crew_class_launcher$launch()}}
\item \href{#method-crew_class_launcher-terminate}{\code{crew_class_launcher$terminate()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-crew_class_launcher-new"></a>}}
\if{latex}{\out{\hypertarget{method-crew_class_launcher-new}{}}}
\subsection{Method \code{new()}}{
Launcher constructor.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{crew_class_launcher$new(
  data = NULL,
  seconds_launch = NULL,
  seconds_idle = NULL,
  seconds_wall = NULL,
  seconds_exit = NULL,
  seconds_poll_high = NULL,
  seconds_poll_low = NULL,
  tasks_max = NULL,
  tasks_timers = NULL,
  async_dial = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{Named list of R objects to send to the global environment
of each launched worker. Can be overridden in the \code{launch()} method.}

\item{\code{seconds_launch}}{Seconds of launchup time to allow.
A worker is unconditionally assumed to be alive
from the moment of its launch until \code{seconds_launch} seconds later.
After \code{seconds_launch} seconds, the worker is only
considered alive if it is actively connected to its assign websocket.}

\item{\code{seconds_idle}}{Maximum number of seconds that a worker can idle
since the completion of the last task. If exceeded, the worker exits.
But the timer does not launch until \code{tasks_timers} tasks
have completed.
See the \code{idletime} argument of \code{mirai::server()}.}

\item{\code{seconds_wall}}{Soft wall time in seconds.
The timer does not launch until \code{tasks_timers} tasks
have completed.
See the \code{walltime} argument of \code{mirai::server()}.}

\item{\code{seconds_exit}}{Number of seconds to wait for NNG websockets
to finish sending large data (in case an exit signal is received).
See the \code{exitdelay} argument of \code{mirai::server()}.}

\item{\code{seconds_poll_high}}{High polling interval in seconds for the
\code{mirai} active queue. See the \code{pollfreqh} argument of
\code{mirai::server()}.}

\item{\code{seconds_poll_low}}{Low polling interval in seconds for the \code{mirai}
active queue. See the \code{pollfreql} argument of
\code{mirai::server()}.}

\item{\code{tasks_max}}{Maximum number of tasks that a worker will do before
exiting. See the \code{maxtasks} argument of \code{mirai::server()}.}

\item{\code{tasks_timers}}{Number of tasks to do before activating
the timers for \code{seconds_idle} and \code{seconds_wall}.
See the \code{timerlaunch} argument of \code{mirai::server()}.}

\item{\code{async_dial}}{Logical, whether the \code{mirai} workers should dial in
asynchronously. See the \code{asyncdial} argument of \code{mirai::server()}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
An \code{R6} object with the launcher.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{if (identical(Sys.getenv("CREW_EXAMPLES"), "true")) {
router <- crew_router()
router$listen()
launcher <- crew_launcher_callr()
launcher$populate(sockets = router$sockets())
launcher$launch()
m <- mirai::mirai("result")
Sys.sleep(0.25)
m$data
router$terminate()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-crew_class_launcher-validate"></a>}}
\if{latex}{\out{\hypertarget{method-crew_class_launcher-validate}{}}}
\subsection{Method \code{validate()}}{
Validate the launcher.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{crew_class_launcher$validate()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{NULL} (invisibly).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-crew_class_launcher-settings"></a>}}
\if{latex}{\out{\hypertarget{method-crew_class_launcher-settings}{}}}
\subsection{Method \code{settings()}}{
List of arguments for \code{mirai::server()}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{crew_class_launcher$settings(socket)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{socket}}{Character of length 1, websocket address of the worker
to launch.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
List of arguments for \code{mirai::server()}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-crew_class_launcher-populate"></a>}}
\if{latex}{\out{\hypertarget{method-crew_class_launcher-populate}{}}}
\subsection{Method \code{populate()}}{
Populate the workers data frame.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{crew_class_launcher$populate(sockets)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{sockets}}{Character vector of worker websockets.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{NULL} (invisibly).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-crew_class_launcher-launching"></a>}}
\if{latex}{\out{\hypertarget{method-crew_class_launcher-launching}{}}}
\subsection{Method \code{launching()}}{
Get the workers that attempted a launch
within \code{seconds_launch} seconds ago.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{crew_class_launcher$launching()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Character vector of worker websockets.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-crew_class_launcher-launch"></a>}}
\if{latex}{\out{\hypertarget{method-crew_class_launcher-launch}{}}}
\subsection{Method \code{launch()}}{
Launch one or more workers.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{crew_class_launcher$launch(sockets = character(0))}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{sockets}}{Sockets where the workers will dial in.}

\item{\code{data}}{Named list of R objects that will be set to the
global environment of the server.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
If a worker is already assigned to a socket,
the previous worker is terminated before the next
one is launched.
}

\subsection{Returns}{
\code{NULL} (invisibly).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-crew_class_launcher-terminate"></a>}}
\if{latex}{\out{\hypertarget{method-crew_class_launcher-terminate}{}}}
\subsection{Method \code{terminate()}}{
Terminate one or more workers.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{crew_class_launcher$terminate(sockets = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{sockets}}{Character vector of sockets of the workers
to terminate.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{NULL} (invisibly).
}
}
}
